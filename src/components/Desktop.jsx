import { useState, useEffect } from "react"
import Icon from "./Icon.jsx"
import Window from "./window.jsx"
import Taskbar from "./taskbar.jsx"

export default function Desktop() {
  const [openWindows, setOpenWindows] = useState([])
  const [stars, setStars] = useState([])

  const handleOpen = (id) => {
    if (!openWindows.includes(id)) {
      setOpenWindows([...openWindows, id])
    }
  }

  const handleClose = (id) => {
    setOpenWindows(openWindows.filter((w) => w !== id))
  }

  const icons = [
    { id: "about", label: "About", icon: "/public/msagent-3.png" },
    { id: "work", label: "Work", icon: "/public/directory_closed-4.png" },
    { id: "case", label: "Case Study", icon: "/public/briefcase-2.png" },
    { id: "mail", label: "Mail", icon: "/public/outlook_express-4.png" },
  ]

  // ⭐ Generate random stars only once
  useEffect(() => {
    const newStars = Array.from({ length: 40 }).map(() => ({
      top: Math.random() * 40 + "%", // only in top 40% of screen
      left: Math.random() * 100 + "%",
      size: Math.floor(Math.random() * 3) + 2, // 2px–4px
      delay: Math.random() * 5, // random twinkle offset
    }))
    setStars(newStars)
  }, [])

  return (
    <div className="w-screen h-screen relative overflow-hidden">
      {/* Background gradient */}
      <div className="absolute inset-0 bg-gradient-to-b from-black via-purple-920 to-purple-950"></div>
      <div className="absolute inset-0 bg-black opacity-20"></div>

      {/* 🌙 Moon */}
      <div
        className="absolute rounded-full bg-gray-200 shadow-lg"
        style={{
          top: "10%",
          right: "10%",
          width: "80px",
          height: "80px",
          boxShadow: "0 0 30px rgba(255,255,200,0.6)"
        }}
      />

      {/* ⭐ Pixelated stars */}
      <div className="absolute inset-0 pointer-events-none">
        {stars.map((star, i) => (
          <div
            key={i}
            className="absolute bg-white animate-twinkle"
            style={{
              top: star.top,
              left: star.left,
              width: `${star.size}px`,
              height: `${star.size}px`,
              animationDelay: `${star.delay}s`,
              imageRendering: "pixelated", // makes them look more retro
            }}
          />
        ))}
      </div>

      {/* 🌆 City Silhouette */}
      <div className="absolute bottom-0 left-0 w-full h-auto overflow-hidden">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 4000 1168"
          preserveAspectRatio="xMidYMax slice"
          className="w-full h-auto fill-black"
        >
          <polygon 
      points="0 769 15.21 768.55 15.21 752.92 67.77 752.92 67.77 762.86 62.09 768.55 93.34 768.55 93.34 760.02 107.55 760.02 107.55 352.31 165.79 352.31 165.79 340.94 185.68 340.94 185.68 326.74 195.62 326.74 195.62 301.17 303.59 301.17 303.59 335.26 332 335.26 421.5 346.63 421.5 662 439.97 662 439.97 640.69 495.37 640.69 495.37 633.59 523.78 633.59 523.78 640.69 537.99 640.69 537.99 657.74 589.13 657.74 589.13 296.91 601.92 296.91 606.18 304.01 616.12 304.01 616.12 296.91 668.68 296.91 668.68 252.87 711.3 252.87 711.3 220.19 853.36 242.92 853.36 262.81 886.04 262.81 886.04 453.17 900.24 453.17 900.24 527.04 913.03 527.04 913.03 474.48 924.39 474.48 924.39 284.12 962.75 284.12 962.75 274.18 981.22 261.39 1087.76 279.86 1087.76 296.91 1121.86 296.91 1121.86 461.7 1151.69 478.74 1174.42 478.74 1174.42 380.72 1207.09 380.72 1207.09 301.17 1224.14 301.17 1224.14 255.71 1232.66 255.71 1232.66 238.66 1242.61 238.66 1242.61 244.34 1255.39 244.34 1255.39 235.82 1344.89 251.45 1357.68 225.88 1442.91 225.88 1442.91 157.69 1451.44 153.43 1451.44 25.57 1513.94 25.57 1587.81 42.62 1587.81 115.07 1600.6 122.17 1600.6 453.17 1610.54 470.22 1621.91 470.22 1621.91 535.57 1660.27 535.57 1660.27 234.4 1656 234.4 1656 224.46 1661.69 218.77 1687.26 218.77 1687.26 198.88 1746.92 130.7 1808.01 197.46 1808.01 218.77 1836.42 218.77 1842.1 224.46 1842.1 237.24 1836.42 237.24 1836.42 343.79 1844.94 343.79 1844.94 333.84 1856.31 333.84 1864.83 340.94 1864.83 348.05 1928.76 357.99 1928.76 518.52 1972.8 518.52 1972.8 539.83 1979.9 539.83 1979.9 546.93 1988.42 546.93 1988.42 481.58 1996.95 481.58 1996.95 454.59 2045.25 454.59 2045.25 440.39 2086.45 440.39 2086.45 450.33 2121.96 450.33 2121.96 339.52 2133.33 339.52 2133.33 278.44 2136.17 278.44 2136.17 255.71 2151.79 230.14 2151.79 208.83 2166 186.1 2170.26 161.95 2195.83 129.27 2200.09 106.55 2200.09 19.89 2210.04 0 2215.72 123.59 2229.93 139.22 2288.17 279.86 2288.17 315.37 2292.43 318.22 2292.43 340.94 2296.7 345.21 2296.7 426.18 2312.32 426.18 2312.32 420.5 2389.04 420.5 2389.04 437.55 2404.66 437.55 2404.66 429.02 2448.7 429.02 2448.7 338.1 2462.91 338.1 2462.91 264.23 2470.01 258.55 2470.01 235.82 2474.27 228.72 2482.8 213.09 2487.06 196.04 2523.99 166.21 2523.99 153.43 2529.67 144.9 2533.94 153.43 2533.94 161.95 2569.45 190.36 2573.71 207.41 2583.66 234.4 2583.66 248.61 2595.02 267.07 2595.02 335.26 2614.91 345.21 2614.91 420.5 2644.74 420.5 2644.74 441.81 2657.53 441.81 2657.53 473.06 2671.74 473.06 2671.74 417.66 2734.24 403.45 2734.24 390.67 2741.34 383.56 2761.23 383.56 2761.23 379.3 2813.8 379.3 2813.8 397.77 2829.42 397.77 2829.42 403.45 2842.21 403.45 2842.21 572.5 2854.99 572.5 2854.99 552.61 2862.1 544.09 2872.04 544.09 2872.04 529.89 2877.72 529.89 2877.72 485.85 2960.12 485.85 2962.96 359.41 2968.64 485.85 2980.01 488.69 2987.11 488.69 2987.11 465.96 3051.04 465.96 3058.14 448.91 3060.98 363.67 3069.5 434.7 3089.39 434.7 3092.23 447.49 3102.18 447.49 3102.18 436.13 3161.84 436.13 3161.84 460.28 3173.21 460.28 3173.21 475.9 3249.92 487.27 3249.92 545.51 3303.9 545.51 3303.9 527.04 3330.9 527.04 3330.9 534.15 3345.1 534.15 3345.1 545.51 3357.89 545.51 3357.89 538.41 3460.17 538.41 3460.17 522.78 3501.37 522.78 3501.37 529.89 3514.15 529.89 3514.15 514.26 3536.88 514.26 3536.88 532.73 3542.57 532.73 3542.57 545.51 3566.72 545.51 3566.72 524.2 3572.4 519.94 3572.4 502.89 3578.08 494.37 3617.86 494.37 3626.38 502.89 3626.38 521.36 3632.06 525.62 3632.06 575.34 3640.59 575.34 3640.59 502.89 3649.11 502.89 3649.11 490.11 3667.58 490.11 3667.58 410.55 3700.25 410.55 3701.67 416.24 3714.46 416.24 3718.72 420.5 3718.72 427.6 3741.45 427.6 3751.39 433.28 3751.39 497.21 3786.91 497.21 3798.27 507.16 3798.27 535.57 3812.48 535.57 3812.48 510 3821 510 3821 504.31 3845.15 504.31 3845.15 510 3856.52 510 3856.52 534.15 3931.81 534.15 3953.12 541.25 3953.12 561.14 4000 571 4000 1168 0 1168 0 769" 
      fill="black"
    />
  </svg>
      </div>

      {/* 💻 Icons and windows */}
      <div className="relative z-10 p-6 grid grid-cols-2 gap-6 w-32 text-white">
        {icons.map(({ id, label, icon }) => (
          <Icon
            key={id}
            label={label}
            icon={icon}
            onClick={() => handleOpen(id)}
          />
        ))}
        {openWindows.map((id) => (
          <Window key={id} id={id} onClose={() => handleClose(id)} />
        ))}
      </div>

      {/* Taskbar */}
      <Taskbar />
    </div>
  )
}
